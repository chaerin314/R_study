1+1
1+1
1+1
100/3
100/3
1+1
1+1
1+1
setwd('C:/Users/dnflc/Desktop/데이터_분석을_위한_R_프로그래밍')
cars
boxplot(cars$dist)
out <- boxplot(cars$dist)
names(out)
out$stats
View(out)
out.cars <- cars[!(cars$dist>93),] # cars안의 dist이 93 이하인 데이터 선택
cars
library(psych)
corr.test(out.cars)
corr.test(out.cars$speed, out.cars$dist)
setwd('C:/Users/dnflc/Desktop/데이터_분석을_위한_R_프로그래밍')
# 다중 회귀 linear model
data <- read.csv('제품만족도.csv')
data
str(data)
head(data)
# 회귀선
model <- lm(dist~speed, cars) #linear model(y~x, 이 데이터에서)
abline(model) # 선 추가
plot(cars$speed, cars$dist)
plot(cars)
# 회귀선
model <- lm(dist~speed, cars) #linear model(y~x, 이 데이터에서)
abline(model)
result2 <- lm(만족감 ~ 외관+편의성+유용성, data)
View(result2)
summary(result2)
library(lm.beta)
library(lm.beta)
install.packages(lm.beta)
install.packages(lm.beta)
install.packages('lm.beta')
library(lm.beta)
lm.beta(result2) # 표준화된 계수 산출
capture.output(summary(result2), file='다중회귀.txt')
#
data2 <- read.csv('기억.csv')
str(data2)
head(data2)
data2$group <- factor(data2$group)
str(data2)
head(data2)
boxplot(data2$recall~data2$group)
boxplot(data2$recall~data2$group)
describeBy(data2$recall, data2$group) # 집단에 따라 기술통계
install.packages('car')
library(car)
leveneTest(recall~group, data)
leveneTest(recall ~ group, data)
library(car)
leveneTest(recall~group, data)
leveneTest(recall~group, data2)
oneway.test(recall~group, data2, var.equal=T) # 일원분산분석
pairwise.t.test(data2$recall, data$group, p.adj='bonferroni') # 엄격한 기준(3번비교=>0.05/3으로)
pairwise.t.test(data2$recall, data2$group, p.adj='bonferroni') # 엄격한 기준(3번비교=>0.05/3으로)
# 성별에 따른 신장의 차이:
data3 <- read.table('신장.txt', header=T)
str(data3)
data3$gender <- factor(data3$gender)
str(data3)
leveneTest(height~gender, data3)
t.test(height~gender, data3, var.equal=T) # t검정
# 워드클라우드
install.packages('wordcloud2')
# 군집의 수 결정
install.packages('NbClust')
# 워드클라우드
install.packages('wordcloud2')
install.packages(c('hash', 'tau', 'Sejong', 'RSQLite', 'devtools',
'bit', 'rex', 'lazyeval', 'htmlwidgets',
'crosstalk', 'promises', 'later', 'sessioninfo',
'xopen', 'bit64', 'blob', 'DBI', 'memoise',
'plogr', 'covr', 'DT', 'rcmdcheck',
'rversions'), type= 'binary')
install.packages('rJava')
install.packages('multilinguer')  # jdk 설치 패키지
rJava::.jinit()         # error가 없는 경우 KoNLP 설치로 이동
# KoNLP 설치
install.packages('remotes')
# KoNLP 설치
install.packages('remotes')
remotes::install_github('haven-jeon/KoNLP', upgrade= 'never',
INSTALL_opts= c('--no-multiarch'), force= T)
# KoNLP 설치
install.packages('remotes')
########## 군집분석 ##########
# 분석 데이터 확인
str(iris)
head(iris)
data <- iris
# 제품만족감에 영향을 미치는 요인들: 다중 회귀 linear model
data <- read.csv('제품만족도.csv')
data4 <- iris
names(data4) <- c('꽃받침길이', '꽃받침넓이', '꽃잎길이', '꽃잎넓이', '종') # 변수 이름 변경
str(data)
str(data4)
# 특성에 따른 종 분류
# 1) 계층적 군집분석(hc)
# 거리 계산(유클리디안)
dist <- dist(data4[, 1:4])  # '종'변수 제외hc <- hclust(dist)
hc <- hclust(dist)
hc
# 덴드로그램 그리기
plot(hc, hang= -1)  # hang: 레이블 정렬 (0, -1)
rect.hclust(hc, k=3, border='blue')  # 군집 수 3개로 지정
# 분류결과
cluster <- cutree(hc, k=3)
cluster
data4$c <- cluster
str(data4)
table(data4$c)
# 분류결과와 종의 일치도
table(data4$종)
table(data4$c, data4$종)
hc
# 거리 계산(유클리디안)
dist <- dist(data4[, 1:4])  # '종'변수 제외
hc <- hclust(dist)
hc
library(NbClust)
cn <- NbClust(data[,1:4], min.nc=2,  max.nc=5, method="kmeans", index="all") # 데이터를 지정해준 범위 내에서 각각 계산해서 plot2-3개
cn <- NbClust(data[,1:4], min.nc=2,  max.nc=5, method="kmeans", index="all") # 데이터를 지정해준 범위 내에서 각각 계산해서 plot2-3개
cn <- NbClust(data[,1:4], min.nc=2,  max.nc=5, method="kmeans", index="all") # 데이터를 지정해준 범위 내에서 각각 계산해서 plot2-3개
cn <- NbClust(data4[,1:4], min.nc=2,  max.nc=5, method="kmeans", index="all") # 데이터를 지정해준 범위 내에서 각각 계산해서 plot(2-3개)
# K-means 군집분석(둘다 확인)
km2 <- kmeans(data4[, 1:4], 2)    # 2개로 지정
km3 <- kmeans(data4[, 1:4], 3)    # 3개로 지정
# 분류결과
table(km2$cluster)
table(km2$cluster, data4$종) # 분류결과와 종의 일치도
plot(data4[, c('꽃받침길이', '꽃받침넓이')], col= km2$cluster)
plot(data4[, c('꽃잎길이', '꽃잎넓이')], col= km2$cluster)
table(km3$cluster)
table(km3$cluster, data$종) # 분류결과와 종의 일치도
table(km3$cluster)
table(km3$cluster, data4$종) # 분류결과와 종의 일치도
plot(data[, c('꽃받침길이', '꽃받침넓이')], col= km3$cluster)
plot(data[, c('꽃잎길이', '꽃잎넓이')], col= km3$cluster)
plot(data4[, c('꽃받침길이', '꽃받침넓이')], col= km3$cluster)
plot(data4[, c('꽃잎길이', '꽃잎넓이')], col= km3$cluster)
data4$kmc <- km3$cluster
str(data4)
########## 워드클라우드 ##########
install.packages('wordcloud2')
install.packages(c('hash', 'tau', 'Sejong', 'RSQLite', 'devtools',
'bit', 'rex', 'lazyeval', 'htmlwidgets',
'crosstalk', 'promises', 'later', 'sessioninfo',
'xopen', 'bit64', 'blob', 'DBI', 'memoise',
'plogr', 'covr', 'DT', 'rcmdcheck',
'rversions'), type='binary')
install.packages('rJava')
rJava::.jinit() # error가 없는 경우 KoNLP 설치로 이동
rJava::.jinit() # error가 없는 경우 KoNLP 설치로 이동
# KoNLP 설치
install.packages('remotes')
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade= 'never', INSTALL_opts= c('--no-multiarch'), force= T)
remotes::install_github('haven-jeon/KoNLP', upgrade='never', INSTALL_opts=c('--no-multiarch'), force=T)
remotes::install_github('haven-jeon/KoNLP', upgrade='never', INSTALL_opts=c('--no-multiarch'), force=T)
remotes::install_github('haven-jeon/KoNLP', upgrade='never', INSTALL_opts=c('--no-multiarch'), force=T)
remotes::install_github('haven-jeon/KoNLP', upgrade='never', INSTALL_opts=c('--no-multiarch'), force=T)
# 설치 오류 시 scala-library-2.11.8.jar 파일을 java폴더에
# 복사하여 붙여넣은 후 프로그램 재실행하여 library 실행
library(KoNLP)
# 설치 오류 시 scala-library-2.11.8.jar 파일을 java폴더에
# 복사하여 붙여넣은 후 프로그램 재실행하여 library 실행
library(KoNLP)
extractNoun('테스트입니다 안녕하세요')
# 사전 추가
useSejongDic()
# 설치 오류 시 scala-library-2.11.8.jar 파일을 java폴더에
# 복사하여 붙여넣은 후 프로그램 재실행하여 library 실행
library(KoNLP)
extractNoun('테스트입니다 안녕하세요')
# 사전 추가
useSejongDic()
# 설치 오류 시 scala-library-2.11.8.jar 파일을 java폴더에
# 복사하여 붙여넣은 후 프로그램 재실행하여 library 실행
library(KoNLP)
extractNoun('테스트입니다 안녕하세요')
# 사전 추가
useSejongDic()
